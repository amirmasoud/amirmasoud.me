<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Guzzle on Amirmasoud</title>
    <link>http://localhost:1313/tags/guzzle/</link>
    <description>Recent content in Guzzle on Amirmasoud</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 12 Jun 2020 15:41:17 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/guzzle/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Consume and Expose API – Laravel possible solutions</title>
      <link>http://localhost:1313/2020/06/12/consume-and-expose-api-laravel-possible-solutions/</link>
      <pubDate>Fri, 12 Jun 2020 15:41:17 +0000</pubDate>
      <guid>http://localhost:1313/2020/06/12/consume-and-expose-api-laravel-possible-solutions/</guid>
      <description>&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;how-to-consume-apis-inside-laravel&#34;&gt;How to consume APIs inside Laravel?&lt;/h2&gt;&#xA;&lt;p&gt;If you want to fetch, save, crawl, or fire a one-time request to a remote server that exposes API, there are a variety of options for Laravel. An example use-case would be updating the IMDB rating for a batch of movies and series for your film listing web application.&lt;/p&gt;&#xA;&lt;p&gt;The popular ones are:&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;&lt;em&gt;Things to keep in mind…&lt;/em&gt;&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;&lt;strong&gt;Heads Up!&lt;/strong&gt; if the API you are going to consume in your application is well-known and complex, there is a high chance that someone else has already developed a library to just work with that API, like this &lt;!-- raw HTML omitted --&gt;Laravel package&lt;!-- raw HTML omitted --&gt; by &lt;!-- raw HTML omitted --&gt;Mustapha Alaouy&lt;!-- raw HTML omitted --&gt; that specifically calls YouTube API.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
